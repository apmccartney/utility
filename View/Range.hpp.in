#ifndef UTILITY_VIEW_RANGE_HPP
#define UTILITY_VIEW_RANGE_HPP

/**
 * @brief
 * An abstract range of elements composed by the View class and implmented by
 * instances of the IteratorRange template.
 *
 * @details
 * By composing a Range pointer, the dispatch on the iterator type of the 
 * referenced container may be deferred until run-time by the encapsulating 
 * class.
 */
class Range{
public:
  /* constuctor and destructor */
  virtual ~Range() = default;

  /* operators */
  virtual data&
  operator[](const long position) const = 0;

  /* methods */
  /** 
   * @brief
   * A reference to the element at specified location @p position, 
   * with bounds checking.
   */
  virtual data&
  at(const long position) const = 0;

  /** @brief Returns reference to the last element in the range. */
  virtual data&
  back() const = 0;

  /** @brief Returns reference to the first element in the range. */
  virtual data&
  front() const = 0;

  /** @brief Returns an iterator to the first element of the range. */ 
  virtual std::function< std::tuple< data&, long >( int ) >
  begin() const = 0;

  /** 
   * @brief 
   * Returns an iterator to the element following the last element of the range.
   */
  virtual std::function< std::tuple< data&, long >( int ) >
  end() const = 0;

  /** @brief Checks if the range has no elements */
  virtual bool
  empty() const = 0;

  /** @brief Returns the number of elements in the range */
  virtual int
  size() const = 0;  
};

#endif
