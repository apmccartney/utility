#ifndef UTILITY_VIEW_REVERSE_ITERATOR_HPP
#define UTILITY_VIEW_REVERSE_ITERATOR_HPP

class reverse_iterator {
public:
  typedef std::ptrdiff_t                  difference_type;
  typedef data                            value_type;
  typedef data&                           reference;
  typedef data*                           pointer;
  typedef std::random_access_iterator_tag iterator_category;
    
  /* constructor and destructor */
  reverse_iterator( std::function< std::tuple< reference, long> ( long ) > f ) :
    iteratorLambda_(f){}

  reverse_iterator( const_iterator&& ) = default;
  reverse_iterator( const reverse_iterator& ) = default; 
  ~reverse_iterator() = default;
  
  /* operators */
  reference
  operator*() const {
    return std::get<0>( this->iteratorLambda_(0) );
  }
    
  const reverse_iterator&
  operator++(){
    this->iteratorLambda_(-1);
    return *this;
  }
    
  const reverse_iterator&
  operator--(){
    this->iteratorLambda_(1);
    return *this;
  }

  reverse_iterator
  operator++( int ){
    reverse_iterator tmp(this->iteratorLambda_);
    this->iteratorLambda_(-1);
    return tmp;
  }
    
  reverse_iterator
  operator--( int ){
    reverse_iterator tmp(this->iteratorLambda_);
    this->iteratorLambda_(1);
    return tmp;
  }

  reference
  operator[](const long n) const {
    reverse_iterator tmp(this->iteratorLambda_);
    return std::get<0>(tmp.iteratorLambda_(-n));
  }

  bool
  operator==( const reverse_iterator& other ) const {
    return &(*(*this)) == &(*other);
  }
    
  bool
  operator!=( const reverse_iterator& other ) const {
    return &(*(*this)) != &(*other);
  }

  bool
  operator<=( const reverse_iterator& other ) const {
    return (
      ( std::get<1>( this->iteratorLambda_(0) ) <
        std::get<1>( other.iteratorLambda_(0) )) ||
      (&(*(*this)) == &(*other)));
  }
    
  bool
  operator>=( const reverse_iterator& other ) const {
    return (
      ( std::get<1>( this->iteratorLambda_(0) ) >
        std::get<1>( other.iteratorLambda_(0) )) ||
      (&(*(*this)) == &(*other)));
  }

  bool
  operator<( const reverse_iterator& other ) const {
    return ( std::get<1>( this->iteratorLambda_(0) ) <
             std::get<1>( other.iteratorLambda_(0) ));
  }
    
  bool
  operator>( const reverse_iterator& other ) const {
    return ( std::get<1>( this->iteratorLambda_(0) ) >
             std::get<1>( other.iteratorLambda_(0) ));
  }

  reverse_iterator
  operator+(const long add){
    reverse_iterator tmp(this->iteratorLambda_);
    tmp.iteratorLambda_(-add);
    return tmp;
  }
    
  reverse_iterator
  operator-(const long minus){
    reverse_iterator tmp(this->iteratorLambda_);
    tmp.iteratorLambda_(minus);
    return tmp;
  }
    
  difference_type
  operator-(const reverse_iterator& other) const {
    return
      std::get<1>(this->iteratorLambda_(0)) -
      std::get<1>(other.iteratorLambda_(0));
  }
    
  reverse_iterator&
  operator+=(const long add){
    this->iteratorLambda_(-add);
    return *this;
  }

  reverse_iterator&
  operator-=(const long minus){
    this->iteratorLambda_(minus);
    return *this;
  }

  /* methods */
  iterator
  base() const {
    auto tmp = const_iterator(this->iteratorLambda_);
    return ++tmp;
  }

protected:
  /* fields */
  typename std::function< std::tuple<reference, long>( long ) >
  iteratorLambda_;
};

#endif
