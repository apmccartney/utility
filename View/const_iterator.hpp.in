#ifndef UTILITY_VIEW_CONST_ITERATOR_HPP
#define UTILITY_VIEW_CONST_ITERATOR_HPP

class const_iterator {
public:
  typedef std::ptrdiff_t                  difference_type;
  typedef data                            value_type;
  typedef const data&                     reference;
  typedef const data*                     pointer;
  typedef std::random_access_iterator_tag iterator_category;

  /* constructor and destructor */
  const_iterator( std::function< std::tuple< reference, long> ( long ) > f ) :
    iteratorLambda_(f){}

  const_iterator( const_iterator&& ) = default;
  const_iterator( const const_iterator & ) = default; 
  
  ~const_iterator() = default;
  
  /* operators */
  reference
  operator*() const { return std::get<0>( this->iteratorLambda_(0) ); }
    
  const const_iterator&
  operator++(){
    this->iteratorLambda_(1);
    return *this;
  }

  const const_iterator&
  operator--(){
    this->iteratorLambda_(-1);
    return *this;
  }

  const_iterator
  operator++( int ){
    const_iterator tmp(this->iteratorLambda_);
    this->iteratorLambda_(1);
    return tmp;
  }

  const_iterator
  operator--( int ){
    const_iterator tmp(this->iteratorLambda_);
    this->iteratorLambda_(-1);
    return tmp;
  }

  reference
  operator[](const long n) const {
    const_iterator tmp(this->iteratorLambda_);
    return std::get<0>(tmp.iteratorLambda_(n));
  }

  bool
  operator==( const const_iterator& other ) const {
    return &(*(*this)) == &(*other);
  }

  bool
  operator!=( const const_iterator& other ) const {
    return not (*this == other);
  }

  bool
  operator<=( const const_iterator& other ) const {
    return (
      ( std::get<1>( this->iteratorLambda_(0) ) <
        std::get<1>( other.iteratorLambda_(0) )) ||
      (&(*(*this)) == &(*other)));
  }

  bool
  operator>=( const const_iterator& other ) const {
    return (
      ( std::get<1>( this->iteratorLambda_(0) ) >
        std::get<1>( other.iteratorLambda_(0) )) ||
      (&(*(*this)) == &(*other)));
  }

  bool
  operator<( const const_iterator& other ) const {
    return ( std::get<1>( this->iteratorLambda_(0) ) <
             std::get<1>( other.iteratorLambda_(0) ));
  }
  
  bool
  operator>( const const_iterator& other ) const {
    return ( std::get<1>( this->iteratorLambda_(0) ) >
             std::get<1>( other.iteratorLambda_(0) ));
  }
    
  const_iterator
  operator+(const long add){
    const_iterator tmp(this->iteratorLambda_);
    tmp.iteratorLambda_(add);
    return tmp;
  }

  const_iterator
  operator-(const long minus){
    const_iterator tmp(this->iteratorLambda_);
    tmp.iteratorLambda_(-minus);
    return tmp;
  }
  
  difference_type
  operator-(const const_iterator& other) const {
    return
      std::get<1>(this->iteratorLambda_(0)) -
      std::get<1>(other.iteratorLambda_(0));
  }
  
  const_iterator&
  operator+=(const long add){
    this->iteratorLambda_(add);
    return *this;
  }
  
  const_iterator&
  operator-=(const long minus){
    this->iteratorLambda_(-minus);
    return *this;
  }
    
protected:
  /* fields */
  typename std::function< std::tuple<reference, long>( long ) >
  iteratorLambda_;
};

#endif
