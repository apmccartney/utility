#ifndef UTILITY_VIEW_ITERATOR_RANGE_HPP
#define UTILITY_VIEW_ITERATOR_RANGE_HPP

template< typename Iterator >
class IteratorRange :
  public Range {
public:
  /* constructor and destructor */
  IteratorRange( const Iterator start,
                 const Iterator finish,
                 data, std::random_access_iterator_tag ) :
    start(start),
    finish(finish),
    length(std::distance(start, finish)){}
  
  ~IteratorRange() = default;
    
  /* operator */
  data&
  operator[](const long position) const final { return start[position]; }

  /* methods */
  /** 
   * @brief
   * A reference to the element at specified location @p position, 
   * with bounds checking.
   */
  data&
  at(const long position) const final {
    if ( (position >= this->length) || (position < 0) ){
      throw std::out_of_range("");
    }
    return start[position];
  }

  /** @brief Returns reference to the last element in the range. */
  data&
  back() const final { return *(this->finish - 1); }

  /** @brief Returns reference to the first element in the range. */
  data&
  front() const final { return *(this->start); }

  /**
   * @brief 
   * Returns an stateful lambda composing a mutable position index and mutable 
   * Iterator each referring to the first element of the range.
   *
   * @details 
   * Returning a stateful lamba (in the form of a std::function) allows the 
   * interface to remain invariant with with respect to the Iterator type
   * parameter
   */
  std::function< std::tuple< data&, long >( int ) >
  begin() const final {
    Iterator tmp = this->start;
    long index = 0;
    return [tmp, index](long n) mutable {
      tmp += n;
      index += n;
      return std::tuple<data&, long>{*tmp, index};
    };
  }

  /**
   * @brief 
   * Returns an stateful lambda composing a mutable position index and mutable 
   * Iterator each referring to the element follow the last element of the range.
   *
   * @details 
   * Returning a stateful lamba (in the form of a std::function) allows the 
   * interface to remain invariant with with respect to the Iterator type
   * parameter
   */ 
  std::function< std::tuple< data&, long >( int ) >
  end() const final {
    Iterator tmp = this->finish;
    long index = this->length;
    return [tmp, index](long n) mutable {
      tmp += n;
      index += n;
      return std::tuple<data&, long>{*tmp, index};
    };
  }

  /** @brief Checks if the range has no elements */
  bool
  empty() const final { return this->start == this->finish; }

  /** @brief Returns the number of elements in the range */
  int
  size() const final { return this->length; }

  /* fields */
  const Iterator start;
  const Iterator finish;
  const long length;    
};

#endif
